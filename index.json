{
  "ARCTokenization/intro.html": {
    "href": "ARCTokenization/intro.html",
    "title": "Add your introductions here! | ARCTokenization Documentation:",
    "keywords": "Add your introductions here! test"
  },
  "ControlledVocabulary/CvParam.html": {
    "href": "ControlledVocabulary/CvParam.html",
    "title": "CvParam | ControlledVocabulary Documentation:",
    "keywords": "CvParam #r \"nuget: ControlledVocabulary, 1.0.0\" Installed Packages ControlledVocabulary, 1.0.0 CvParam is a value that is annotated with a controlled vocabulary term. Suppose we have the name of a person (\"Kevin Schneider\"). We can annotate this value with a term to indicate that it is a name: open ControlledVocabulary let human = CvTerm.create( accession = \"TO:00042069\", // the term's unique accession number name = \"Full Name\", // the term name ref = \"https://link/to/reference/vocabulary/named/TO\" // the reference vocabulary ) let cvp = CvParam( cvTerm = human, pv = ParamValue.Value \"Kevin Schneider\" ) cvp.ToString() CvParam: Full Name ID: TO:00042069 RefUri: https://link/to/reference/vocabulary/named/TO Value: Value \"Kevin Schneider\" Attributes: []"
  },
  "ControlledVocabulary/index.html": {
    "href": "ControlledVocabulary/index.html",
    "title": "ControlledVocabulary | ControlledVocabulary Documentation:",
    "keywords": "ControlledVocabulary ControlledVocabulary is a .NET library for modelling and working with controlled vocabularies. #r \"nuget: ControlledVocabulary, 1.0.0\" Installed Packages ControlledVocabulary, 1.0.0 Plotly.NET, 4.2.0 Plotly.NET.Interactive, 4.2.1 Loading extensions from `C:\\Users\\schne\\.nuget\\packages\\plotly.net.interactive\\4.2.1\\interactive-extensions\\dotnet\\Plotly.NET.Interactive.dll` In its barest form, a term from a controlled vocabulary consists of the term name itself, a URI for the term, and a reference to the controlled vocabulary that contains the term: open ControlledVocabulary CvTerm.create( accession = \"TO:00042069\", // the term's unique accession number name = \"yup\", // the term name ref = \"https://link/to/reference/vocabulary/named/TO\" // the reference vocabulary ) { Accession = \"TO:00042069\"\\n Name = \"yup\"\\n RefUri = \"https://link/to/reference/vocabulary/named/TO\" } Accession TO:00042069 Name yup RefUri https://link/to/reference/vocabulary/named/TO <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"34\">.dni-code-hint {</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"36\">font-style: italic; overflow: hidden; white-space: nowrap; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"42\">}</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"44\">.dni-treeview {</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"46\">white-space: nowrap; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"48\">}</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"50\">.dni-treeview td {</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"52\">vertical-align: top; text-align: start; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"56\">}</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"58\">details.dni-treeview {</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"60\">padding-left: 1em; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"62\">}</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"64\">table td {</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"66\">text-align: start; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"68\">}</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"70\">table tr {</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"72\">vertical-align: top; margin: 0em 0px; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"76\">}</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"78\">table tr td pre</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"80\">{</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"82\">vertical-align: top !important; margin: 0em 0px !important; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"86\">}</p> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"88\">table th {</p> <pre><code sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"90\">text-align: start; </code></pre> <p sourceFile=\"ControlledVocabulary/index.md\" sourceStartLineNumber=\"92\">}</p>"
  },
  "ControlledVocabulary/intro.html": {
    "href": "ControlledVocabulary/intro.html",
    "title": "ControlledVocabulary | ControlledVocabulary Documentation:",
    "keywords": "ControlledVocabulary ControlledVocabulary is a .NET library for modelling and working with controlled vocabularies. #r \"nuget: ControlledVocabulary, 1.0.0\" Installed Packages ControlledVocabulary, 1.0.0 Plotly.NET, 4.2.0 Plotly.NET.Interactive, 4.2.1 Loading extensions from `C:\\Users\\schne\\.nuget\\packages\\plotly.net.interactive\\4.2.1\\interactive-extensions\\dotnet\\Plotly.NET.Interactive.dll` In its barest form, a term from a controlled vocabulary consists of the term name itself, a URI for the term, and a reference to the controlled vocabulary that contains the term: open ControlledVocabulary CvTerm.create( accession = \"TO:00042069\", // the term's unique accession number name = \"yup\", // the term name ref = \"https://link/to/reference/vocabulary/named/TO\" // the reference vocabulary ) { Accession = \"TO:00042069\"\\n Name = \"yup\"\\n RefUri = \"https://link/to/reference/vocabulary/named/TO\" } Accession TO:00042069 Name yup RefUri https://link/to/reference/vocabulary/named/TO .dni-code-hint { font-style: italic; overflow: hidden; white-space: nowrap; } .dni-treeview { white-space: nowrap; } .dni-treeview td { vertical-align: top; text-align: start; } details.dni-treeview { padding-left: 1em; } table td { text-align: start; } table tr { vertical-align: top; margin: 0em 0px; } table tr td pre { vertical-align: top !important; margin: 0em 0px !important; } table th { text-align: start; }"
  },
  "api/ARCTokenization.Address.html": {
    "href": "api/ARCTokenization.Address.html",
    "title": "Class Address",
    "keywords": "Class Address Namespace ARCTokenization Assembly ARCTokenization.dll public static class Address Inheritance object Address Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties column public static CvTerm column { get; } Property Value CvTerm row public static CvTerm row { get; } Property Value CvTerm worksheet public static CvTerm worksheet { get; } Property Value CvTerm Methods columnIndexOfParam(CvParam) public static int columnIndexOfParam(CvParam cvp) Parameters cvp CvParam Returns int createColumnParam(int) public static CvParam createColumnParam(int columnIndex) Parameters columnIndex int Returns CvParam createRowParam(int) public static CvParam createRowParam(int rowIndex) Parameters rowIndex int Returns CvParam createWorksheetParam(string) public static CvParam createWorksheetParam(string worksheetName) Parameters worksheetName string Returns CvParam rowIndexOfParam(CvParam) public static int rowIndexOfParam(CvParam cvp) Parameters cvp CvParam Returns int"
  },
  "api/ARCTokenization.AnnotationTable.NodeType.Tags.html": {
    "href": "api/ARCTokenization.AnnotationTable.NodeType.Tags.html",
    "title": "Class AnnotationTable.NodeType.Tags",
    "keywords": "Class AnnotationTable.NodeType.Tags Namespace ARCTokenization Assembly ARCTokenization.dll public static class AnnotationTable.NodeType.Tags Inheritance object AnnotationTable.NodeType.Tags Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields ProtocolRef public const int ProtocolRef = 2 Field Value int Sink public const int Sink = 1 Field Value int Source public const int Source = 0 Field Value int"
  },
  "api/ARCTokenization.AnnotationTable.NodeType.html": {
    "href": "api/ARCTokenization.AnnotationTable.NodeType.html",
    "title": "Class AnnotationTable.NodeType",
    "keywords": "Class AnnotationTable.NodeType Namespace ARCTokenization Assembly ARCTokenization.dll Modelling of the different types of nodes / Building Blocks. [Obsolete] public sealed class AnnotationTable.NodeType : IEquatable<AnnotationTable.NodeType>, IStructuralEquatable, IComparable<AnnotationTable.NodeType>, IComparable, IStructuralComparable Inheritance object AnnotationTable.NodeType Implements IEquatable<AnnotationTable.NodeType> IStructuralEquatable IComparable<AnnotationTable.NodeType> IComparable IStructuralComparable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties IsProtocolRef public bool IsProtocolRef { get; } Property Value bool IsSink public bool IsSink { get; } Property Value bool IsSource public bool IsSource { get; } Property Value bool ProtocolRef public static AnnotationTable.NodeType ProtocolRef { get; } Property Value AnnotationTable.NodeType Sink public static AnnotationTable.NodeType Sink { get; } Property Value AnnotationTable.NodeType Source public static AnnotationTable.NodeType Source { get; } Property Value AnnotationTable.NodeType Tag public int Tag { get; } Property Value int Methods CompareTo(NodeType) public override sealed int CompareTo(AnnotationTable.NodeType obj) Parameters obj AnnotationTable.NodeType Returns int CompareTo(object) public override sealed int CompareTo(object obj) Parameters obj object Returns int CompareTo(object, IComparer) public override sealed int CompareTo(object obj, IComparer comp) Parameters obj object comp IComparer Returns int Equals(NodeType) public override sealed bool Equals(AnnotationTable.NodeType obj) Parameters obj AnnotationTable.NodeType Returns bool Equals(object) public override sealed bool Equals(object obj) Parameters obj object Returns bool Equals(object, IEqualityComparer) public override sealed bool Equals(object obj, IEqualityComparer comp) Parameters obj object comp IEqualityComparer Returns bool GetHashCode() public override sealed int GetHashCode() Returns int GetHashCode(IEqualityComparer) public override sealed int GetHashCode(IEqualityComparer comp) Parameters comp IEqualityComparer Returns int ToString() public override string ToString() Returns string"
  },
  "api/ARCTokenization.AnnotationTable.TokenizedAnnotationTable.html": {
    "href": "api/ARCTokenization.AnnotationTable.TokenizedAnnotationTable.html",
    "title": "Class AnnotationTable.TokenizedAnnotationTable",
    "keywords": "Class AnnotationTable.TokenizedAnnotationTable Namespace ARCTokenization Assembly ARCTokenization.dll public sealed class AnnotationTable.TokenizedAnnotationTable : IEquatable<AnnotationTable.TokenizedAnnotationTable>, IStructuralEquatable Inheritance object AnnotationTable.TokenizedAnnotationTable Implements IEquatable<AnnotationTable.TokenizedAnnotationTable> IStructuralEquatable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors TokenizedAnnotationTable(FSharpList<FSharpList<CvParam>>, FSharpList<FSharpList<CvParam>>) public TokenizedAnnotationTable(FSharpList<FSharpList<CvParam>> iOColumns, FSharpList<FSharpList<CvParam>> termRelatedBuildingBlocks) Parameters iOColumns FSharpList<FSharpList<CvParam>> termRelatedBuildingBlocks FSharpList<FSharpList<CvParam>> Properties IOColumns public FSharpList<FSharpList<CvParam>> IOColumns { get; } Property Value FSharpList<FSharpList<CvParam>> TermRelatedBuildingBlocks public FSharpList<FSharpList<CvParam>> TermRelatedBuildingBlocks { get; } Property Value FSharpList<FSharpList<CvParam>> Methods Equals(TokenizedAnnotationTable) public override sealed bool Equals(AnnotationTable.TokenizedAnnotationTable obj) Parameters obj AnnotationTable.TokenizedAnnotationTable Returns bool Equals(object) public override sealed bool Equals(object obj) Parameters obj object Returns bool Equals(object, IEqualityComparer) public override sealed bool Equals(object obj, IEqualityComparer comp) Parameters obj object comp IEqualityComparer Returns bool GetHashCode() public override sealed int GetHashCode() Returns int GetHashCode(IEqualityComparer) public override sealed int GetHashCode(IEqualityComparer comp) Parameters comp IEqualityComparer Returns int ToString() public override string ToString() Returns string create(FSharpList<FSharpList<CvParam>>, FSharpList<FSharpList<CvParam>>) public static AnnotationTable.TokenizedAnnotationTable create(FSharpList<FSharpList<CvParam>> io, FSharpList<FSharpList<CvParam>> terms) Parameters io FSharpList<FSharpList<CvParam>> terms FSharpList<FSharpList<CvParam>> Returns AnnotationTable.TokenizedAnnotationTable"
  },
  "api/ARCTokenization.AnnotationTable.html": {
    "href": "api/ARCTokenization.AnnotationTable.html",
    "title": "Class AnnotationTable",
    "keywords": "Class AnnotationTable Namespace ARCTokenization Assembly ARCTokenization.dll Functions to work with FsTables into graph-based models. public static class AnnotationTable Inheritance object AnnotationTable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties nodeColumnNames The header names of the columns containing Node-related Building Blocks. [Obsolete] public static FSharpList<string> nodeColumnNames { get; } Property Value FSharpList<string> Methods getAnnotationTables(FsWorkbook) Takes an FsWorkbook and returns all Annotation Tables it contains. public static FSharpList<FsTable> getAnnotationTables(FsWorkbook workbook) Parameters workbook FsWorkbook Returns FSharpList<FsTable> getDataCellsOf(FsCellsCollection, FsTable, FsCell) Returns all data cells from a given header cell by using a given FsCellsCollection and a given FsTable. public static FSharpList<FsCell> getDataCellsOf(FsCellsCollection fcc, FsTable table, FsCell headerCell) Parameters fcc FsCellsCollection table FsTable headerCell FsCell Returns FSharpList<FsCell> getHeaderCellsOf(FsCellsCollection, FsTable) Returns all header cells from a given FsCellsCollection and a given FsTable. public static IEnumerable<FsCell> getHeaderCellsOf(FsCellsCollection fcc, FsTable table) Parameters fcc FsCellsCollection table FsTable Returns IEnumerable<FsCell> getNodeType<a>(a) Takes a CvParam and returns the type of Node it contains. [Obsolete] public static AnnotationTable.NodeType getNodeType<a>(a cvPar) where a : IParamBase, ICvBase Parameters cvPar a Returns AnnotationTable.NodeType Type Parameters a groupTermRelatedBuildingBlocks(FsTable, FsCellsCollection, FSharpList<FsCell>) Takes a list of header cells from Term-related Building Blocks and groups them into a list of Building Block units. (1 inner list = 1 Building Block unit) public static FSharpList<FSharpList<FsCell>> groupTermRelatedBuildingBlocks(FsTable table, FsCellsCollection fcc, FSharpList<FsCell> cl) Parameters table FsTable fcc FsCellsCollection cl FSharpList<FsCell> Returns FSharpList<FSharpList<FsCell>> parseIOColumns(FsCellsCollection, FsTable, FsCell) Takes a header cells and an FsCellsCollections and returns a list of CvParams according to the information from the FsCells. This function should only be used for parsing input-, output-, and featured columns. public static FSharpList<CvParam> parseIOColumns(FsCellsCollection fcc, FsTable table, FsCell headerCell) Parameters fcc FsCellsCollection table FsTable headerCell FsCell Returns FSharpList<CvParam> parseTermRelatedBuildingBlocks(bool, FsTable, FsCellsCollection, FSharpList<FsCell>) Takes a list of header cells and an FsCellsCollections and returns a list of CvParams according to the information from the FsCells. If crStart is true, it is assumed that the first header cell is a Term containing header cell of a Building Block. This function should only be used for parsing Term-related Building Blocks. public static FSharpList<CvParam> parseTermRelatedBuildingBlocks(bool crStart, FsTable table, FsCellsCollection fcc, FSharpList<FsCell> cl) Parameters crStart bool table FsTable fcc FsCellsCollection cl FSharpList<FsCell> Returns FSharpList<CvParam> parseWorkbook(FsWorkbook) Takes an FsWorkbook and returns a list of worksheet names and their respective IO columns as CvParam lists and Term-related Building Blocks as CvParam lists. (inner CvParam list: CvParams of a column, outer CvParam list: all columns in a worksheet's AnnotationTable) public static FSharpList<Tuple<string, AnnotationTable.TokenizedAnnotationTable>> parseWorkbook(FsWorkbook wb) Parameters wb FsWorkbook Returns FSharpList<Tuple<string, TokenizedAnnotationTable>> splitColumns(FsTable, FsCellsCollection, FSharpList<FsCell>) Takes a list of header cells and splits them into a tuple of IO column header cells and Term-related Building Block header cells by using a given FsCellsCollection and a given FsTable. public static Tuple<FSharpList<FsCell>, FSharpList<FsCell>> splitColumns(FsTable table, FsCellsCollection fcc, FSharpList<FsCell> cl) Parameters table FsTable fcc FsCellsCollection cl FSharpList<FsCell> Returns Tuple<FSharpList<FsCell>, FSharpList<FsCell>>"
  },
  "api/ARCTokenization.Assay.html": {
    "href": "api/ARCTokenization.Assay.html",
    "title": "Class Assay",
    "keywords": "Class Assay Namespace ARCTokenization Assembly ARCTokenization.dll public class Assay Inheritance object Assay Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods parseAnnotationTablesFromFile(string) Parses all annotation tables from an ISA Assay XLSX file as a list of TokenizedAnnotationTables, a type that contains IO columns separated from the other columns. public static FSharpList<Tuple<string, AnnotationTable.TokenizedAnnotationTable>> parseAnnotationTablesFromFile(string path) Parameters path string he path to the assay xlsx file Returns FSharpList<Tuple<string, TokenizedAnnotationTable>> parseMetadataRowsFromFile(string, FSharpOption<bool>) Parses the metadata sheet from an ISA Assay XLSX file as a row-based 2D list of IParams. public static FSharpList<FSharpList<IParam>> parseMetadataRowsFromFile(string path, FSharpOption<bool> UseLastSheetOnIncorrectName) Parameters path string The path to the assay xlsx file UseLastSheetOnIncorrectName FSharpOption<bool> Wether or not to try parse the last sheet as metadata sheet when there is no sheet with the correct name (\"Assay\") in the workbook Returns FSharpList<FSharpList<IParam>> parseMetadataSheetFromFile(string, FSharpOption<bool>) Parses the metadata sheet from an ISA Assay XLSX file as a flat list of IParams. public static FSharpList<IParam> parseMetadataSheetFromFile(string path, FSharpOption<bool> UseLastSheetOnIncorrectName) Parameters path string The path to the assay xlsx file UseLastSheetOnIncorrectName FSharpOption<bool> Wether or not to try parse the last sheet as metadata sheet when there is no sheet with the correct name (\"Assay\") in the workbook Returns FSharpList<IParam>"
  },
  "api/ARCTokenization.Investigation.html": {
    "href": "api/ARCTokenization.Investigation.html",
    "title": "Class Investigation",
    "keywords": "Class Investigation Namespace ARCTokenization Assembly ARCTokenization.dll public class Investigation Inheritance object Investigation Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods parseMetadataRowsFromFile(string, FSharpOption<bool>) Parses the metadata sheet from an ISA Investigation XLSX file as a row-based 2D list of IParams. public static FSharpList<FSharpList<IParam>> parseMetadataRowsFromFile(string path, FSharpOption<bool> UseLastSheetOnIncorrectName) Parameters path string The path to the investigation xlsx file UseLastSheetOnIncorrectName FSharpOption<bool> Wether or not to try parse the last sheet as metadata sheet when there is no sheet with the correct name (\"Assay\") in the workbook Returns FSharpList<FSharpList<IParam>> parseMetadataSheetFromFile(string, FSharpOption<bool>) Parses the metadata sheet from an ISA Study XLSX file as a flat list of IParams. public static FSharpList<IParam> parseMetadataSheetFromFile(string path, FSharpOption<bool> UseLastSheetOnIncorrectName) Parameters path string The path to the study xlsx file UseLastSheetOnIncorrectName FSharpOption<bool> Wether or not to try parse the last sheet as metadata sheet when there is no sheet with the correct name (\"Assay\") in the workbook Returns FSharpList<IParam>"
  },
  "api/ARCTokenization.MetadataSheet.html": {
    "href": "api/ARCTokenization.MetadataSheet.html",
    "title": "Class MetadataSheet",
    "keywords": "Class MetadataSheet Namespace ARCTokenization Assembly ARCTokenization.dll public static class MetadataSheet Inheritance object MetadataSheet Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties parseAssayKey public static FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> parseAssayKey { get; } Property Value FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> parseInvestigationKey public static FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> parseInvestigationKey { get; } Property Value FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> parseStudyKey public static FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> parseStudyKey { get; } Property Value FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> Methods parseKeyWithTerms(FSharpList<CvTerm>, FSharpList<IParam>, string) public static FSharpFunc<ParamValue, IParam> parseKeyWithTerms(FSharpList<CvTerm> terms, FSharpList<IParam> attributes, string key) Parameters terms FSharpList<CvTerm> attributes FSharpList<IParam> key string Returns FSharpFunc<ParamValue, IParam> |Term|_|(FSharpList<CvTerm>, string) public static FSharpOption<CvTerm> |Term|_|(FSharpList<CvTerm> terms, string key) Parameters terms FSharpList<CvTerm> key string Returns FSharpOption<CvTerm> |UnMatchable|(string) public static string |UnMatchable|(string key) Parameters key string Returns string"
  },
  "api/ARCTokenization.Regex.ActivePatterns.html": {
    "href": "api/ARCTokenization.Regex.ActivePatterns.html",
    "title": "Class Regex.ActivePatterns",
    "keywords": "Class Regex.ActivePatterns Namespace ARCTokenization Assembly ARCTokenization.dll public static class Regex.ActivePatterns Inheritance object Regex.ActivePatterns Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods |Comment|_|(string) Matches any Comment[...] pattern. public static FSharpOption<string> |Comment|_|(string input) Parameters input string Returns FSharpOption<string> |Regex|_|(string, string) Matches, if the input string matches the given regex pattern. public static FSharpOption<Match> |Regex|_|(string pattern, string input) Parameters pattern string input string Returns FSharpOption<Match>"
  },
  "api/ARCTokenization.Regex.Pattern.html": {
    "href": "api/ARCTokenization.Regex.Pattern.html",
    "title": "Class Regex.Pattern",
    "keywords": "Class Regex.Pattern Namespace ARCTokenization Assembly ARCTokenization.dll public static class Regex.Pattern Inheritance object Regex.Pattern Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields CommentPattern public const string CommentPattern = \"(?s)Comment\\\\[.*\\\\]\" Field Value string"
  },
  "api/ARCTokenization.Regex.html": {
    "href": "api/ARCTokenization.Regex.html",
    "title": "Class Regex",
    "keywords": "Class Regex Namespace ARCTokenization Assembly ARCTokenization.dll public static class Regex Inheritance object Regex Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/ARCTokenization.Study.html": {
    "href": "api/ARCTokenization.Study.html",
    "title": "Class Study",
    "keywords": "Class Study Namespace ARCTokenization Assembly ARCTokenization.dll public class Study Inheritance object Study Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods parseAnnotationTablesFromFile(string) Parses all annotation tables from an ISA Study XLSX file as a list of TokenizedAnnotationTables, a type that contains IO columns separated from the other columns. public static FSharpList<Tuple<string, AnnotationTable.TokenizedAnnotationTable>> parseAnnotationTablesFromFile(string path) Parameters path string he path to the study xlsx file Returns FSharpList<Tuple<string, TokenizedAnnotationTable>> parseMetadataRowsFromFile(string, FSharpOption<bool>) Parses the metadata sheet from an ISA Study XLSX file as a row-based 2D list of IParams. public static FSharpList<FSharpList<IParam>> parseMetadataRowsFromFile(string path, FSharpOption<bool> UseLastSheetOnIncorrectName) Parameters path string The path to the study xlsx file UseLastSheetOnIncorrectName FSharpOption<bool> Wether or not to try parse the last sheet as metadata sheet when there is no sheet with the correct name (\"Assay\") in the workbook Returns FSharpList<FSharpList<IParam>> parseMetadataSheetfromFile(string, FSharpOption<bool>) Parses the metadata sheet from an ISA Study XLSX file as a flat list of IParams. public static FSharpList<IParam> parseMetadataSheetfromFile(string path, FSharpOption<bool> UseLastSheetOnIncorrectName) Parameters path string The path to the study xlsx file UseLastSheetOnIncorrectName FSharpOption<bool> Wether or not to try parse the last sheet as metadata sheet when there is no sheet with the correct name (\"Assay\") in the workbook Returns FSharpList<IParam>"
  },
  "api/ARCTokenization.Terms.AssayMetadata.html": {
    "href": "api/ARCTokenization.Terms.AssayMetadata.html",
    "title": "Class AssayMetadata",
    "keywords": "Class AssayMetadata Namespace ARCTokenization.Terms Assembly ARCTokenization.dll public static class AssayMetadata Inheritance object AssayMetadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties cvTerms public static FSharpList<CvTerm> cvTerms { get; } Property Value FSharpList<CvTerm> obsoleteCvTerms public static FSharpList<CvTerm> obsoleteCvTerms { get; } Property Value FSharpList<CvTerm> ontology public static OboOntology ontology { get; } Property Value OboOntology"
  },
  "api/ARCTokenization.Terms.InvestigationMetadata.html": {
    "href": "api/ARCTokenization.Terms.InvestigationMetadata.html",
    "title": "Class InvestigationMetadata",
    "keywords": "Class InvestigationMetadata Namespace ARCTokenization.Terms Assembly ARCTokenization.dll public static class InvestigationMetadata Inheritance object InvestigationMetadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties cvTerms public static FSharpList<CvTerm> cvTerms { get; } Property Value FSharpList<CvTerm> obsoleteCvTerms public static FSharpList<CvTerm> obsoleteCvTerms { get; } Property Value FSharpList<CvTerm> ontology public static OboOntology ontology { get; } Property Value OboOntology"
  },
  "api/ARCTokenization.Terms.StructuralTerms.html": {
    "href": "api/ARCTokenization.Terms.StructuralTerms.html",
    "title": "Class StructuralTerms",
    "keywords": "Class StructuralTerms Namespace ARCTokenization.Terms Assembly ARCTokenization.dll public static class StructuralTerms Inheritance object StructuralTerms Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ignoreLine public static CvTerm ignoreLine { get; } Property Value CvTerm metadataSectionKey public static CvTerm metadataSectionKey { get; } Property Value CvTerm userComment public static CvTerm userComment { get; } Property Value CvTerm"
  },
  "api/ARCTokenization.Terms.StudyMetadata.html": {
    "href": "api/ARCTokenization.Terms.StudyMetadata.html",
    "title": "Class StudyMetadata",
    "keywords": "Class StudyMetadata Namespace ARCTokenization.Terms Assembly ARCTokenization.dll public static class StudyMetadata Inheritance object StudyMetadata Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties cvTerms public static FSharpList<CvTerm> cvTerms { get; } Property Value FSharpList<CvTerm> obsoleteCvTerms public static FSharpList<CvTerm> obsoleteCvTerms { get; } Property Value FSharpList<CvTerm> ontology public static OboOntology ontology { get; } Property Value OboOntology"
  },
  "api/ARCTokenization.Terms.html": {
    "href": "api/ARCTokenization.Terms.html",
    "title": "Namespace ARCTokenization.Terms",
    "keywords": "Namespace ARCTokenization.Terms Classes AssayMetadata InvestigationMetadata StructuralTerms StudyMetadata"
  },
  "api/ARCTokenization.Tokenization.html": {
    "href": "api/ARCTokenization.Tokenization.html",
    "title": "Class Tokenization",
    "keywords": "Class Tokenization Namespace ARCTokenization Assembly ARCTokenization.dll public static class Tokenization Inheritance object Tokenization Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods convertTokens(FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>>, IEnumerable<FsCell>) public static FSharpList<IParam> convertTokens(FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> keyParser, IEnumerable<FsCell> line) Parameters keyParser FSharpFunc<FSharpList<IParam>, FSharpFunc<string, FSharpFunc<ParamValue, IParam>>> line IEnumerable<FsCell> Returns FSharpList<IParam>"
  },
  "api/ARCTokenization.Workbook.html": {
    "href": "api/ARCTokenization.Workbook.html",
    "title": "Class Workbook",
    "keywords": "Class Workbook Namespace ARCTokenization Assembly ARCTokenization.dll public static class Workbook Inheritance object Workbook Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods getAssayMetadataSheet(bool, FsWorkbook) public static FsWorksheet getAssayMetadataSheet(bool useLastSheetOnIncorrectName, FsWorkbook assay) Parameters useLastSheetOnIncorrectName bool assay FsWorkbook Returns FsWorksheet getInvestigationMetadataSheet(bool, FsWorkbook) public static FsWorksheet getInvestigationMetadataSheet(bool useLastSheetOnIncorrectName, FsWorkbook investigation) Parameters useLastSheetOnIncorrectName bool investigation FsWorkbook Returns FsWorksheet getStudyMetadataSheet(bool, FsWorkbook) public static FsWorksheet getStudyMetadataSheet(bool useLastSheetOnIncorrectName, FsWorkbook study) Parameters useLastSheetOnIncorrectName bool study FsWorkbook Returns FsWorksheet"
  },
  "api/ARCTokenization.Worksheet.html": {
    "href": "api/ARCTokenization.Worksheet.html",
    "title": "Class Worksheet",
    "keywords": "Class Worksheet Namespace ARCTokenization Assembly ARCTokenization.dll public static class Worksheet Inheritance object Worksheet Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods parseCellsFlatWith<a>(FSharpList<a>, FSharpFunc<a, FSharpList<IParam>>, FsWorksheet) Parses a given list of FsCells of a given FsWorksheet via a given tokenization function and returns the resulting IParam list. Concatenates the resulting lists of IParams into a single list. </summary> <param name=\"cellCollection\">a 2D collection of cells, can for example be a list of FsRows or FsColumns</param> <param name=\"tokenizationFunction\">The tokenization function to use on the inner cell collections (e.g. rows or columns)</param> <param name=\"worksheet\">The FsWorksheet the FsCells belong to</param> public static FSharpList<IParam> parseCellsFlatWith<a>(FSharpList<a> cellCollection, FSharpFunc<a, FSharpList<IParam>> tokenizationFunction, FsWorksheet worksheet) where a : IEnumerable<FsCell> Parameters cellCollection FSharpList<a> tokenizationFunction FSharpFunc<a, FSharpList<IParam>> worksheet FsWorksheet Returns FSharpList<IParam> Type Parameters a parseCellsWith<a>(FSharpList<a>, FSharpFunc<a, FSharpList<IParam>>, FsWorksheet) Parses a given list of FsCells of a given FsWorksheet via a given tokenization function and returns the resulting IParam list. public static FSharpList<FSharpList<IParam>> parseCellsWith<a>(FSharpList<a> cellCollection, FSharpFunc<a, FSharpList<IParam>> tokenizationFunction, FsWorksheet worksheet) where a : IEnumerable<FsCell> Parameters cellCollection FSharpList<a> a 2D collection of cells, can for example be a list of FsRows or FsColumns tokenizationFunction FSharpFunc<a, FSharpList<IParam>> The tokenization function to use on the inner cell collections (e.g. rows or columns) worksheet FsWorksheet The FsWorksheet the FsCells belong to Returns FSharpList<FSharpList<IParam>> Type Parameters a parseColumnsFlatWith(FSharpFunc<FsColumn, FSharpList<IParam>>, FsWorksheet) Parses columns of a given FsWorksheet via a given tokenization function and returns the resulting IAttributeCollection list. Concatenates the resulting lists of IParams into a single list. public static FSharpList<IParam> parseColumnsFlatWith(FSharpFunc<FsColumn, FSharpList<IParam>> tokenizationFunction, FsWorksheet worksheet) Parameters tokenizationFunction FSharpFunc<FsColumn, FSharpList<IParam>> worksheet FsWorksheet Returns FSharpList<IParam> parseColumnsWith(FSharpFunc<FsColumn, FSharpList<IParam>>, FsWorksheet) Parses columns of a given FsWorksheet via a given tokenization function and returns the resulting IParam list. public static FSharpList<FSharpList<IParam>> parseColumnsWith(FSharpFunc<FsColumn, FSharpList<IParam>> tokenizationFunction, FsWorksheet worksheet) Parameters tokenizationFunction FSharpFunc<FsColumn, FSharpList<IParam>> worksheet FsWorksheet Returns FSharpList<FSharpList<IParam>> parseRowsFlatWith(FSharpFunc<FsRow, FSharpList<IParam>>, FsWorksheet) Parses rows of a given FsWorksheet via a given tokenization function and returns the resulting IParam list. Concatenates the resulting lists of IParams into a single list. public static FSharpList<IParam> parseRowsFlatWith(FSharpFunc<FsRow, FSharpList<IParam>> tokenizationFunction, FsWorksheet worksheet) Parameters tokenizationFunction FSharpFunc<FsRow, FSharpList<IParam>> worksheet FsWorksheet Returns FSharpList<IParam> parseRowsWith(FSharpFunc<FsRow, FSharpList<IParam>>, FsWorksheet) Parses rows of a given FsWorksheet via a given tokenization function and returns the resulting IParam list. public static FSharpList<FSharpList<IParam>> parseRowsWith(FSharpFunc<FsRow, FSharpList<IParam>> tokenizationFunction, FsWorksheet worksheet) Parameters tokenizationFunction FSharpFunc<FsRow, FSharpList<IParam>> worksheet FsWorksheet Returns FSharpList<FSharpList<IParam>>"
  },
  "api/ARCTokenization.html": {
    "href": "api/ARCTokenization.html",
    "title": "Namespace ARCTokenization",
    "keywords": "Namespace ARCTokenization Classes Address AnnotationTable Functions to work with FsTables into graph-based models. AnnotationTable.NodeType Modelling of the different types of nodes / Building Blocks. AnnotationTable.NodeType.Tags AnnotationTable.TokenizedAnnotationTable Assay Investigation MetadataSheet Regex Regex.ActivePatterns Regex.Pattern Study Tokenization Workbook Worksheet"
  },
  "api/ControlledVocabulary.CvAttributeCollection.html": {
    "href": "api/ControlledVocabulary.CvAttributeCollection.html",
    "title": "Class CvAttributeCollection",
    "keywords": "Class CvAttributeCollection Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Contains attributes by which to qualify a cv object public class CvAttributeCollection : Dictionary<string, IParam>, IDictionary<string, IParam>, ICollection<KeyValuePair<string, IParam>>, IDictionary, ICollection, IReadOnlyDictionary<string, IParam>, IReadOnlyCollection<KeyValuePair<string, IParam>>, IEnumerable<KeyValuePair<string, IParam>>, IEnumerable, ISerializable, IDeserializationCallback Inheritance object Dictionary<string, IParam> CvAttributeCollection Implements IDictionary<string, IParam> ICollection<KeyValuePair<string, IParam>> IDictionary ICollection IReadOnlyDictionary<string, IParam> IReadOnlyCollection<KeyValuePair<string, IParam>> IEnumerable<KeyValuePair<string, IParam>> IEnumerable ISerializable IDeserializationCallback Derived CvContainer CvObject<T> CvParam UserParam Inherited Members Dictionary<string, IParam>.Add(string, IParam) Dictionary<string, IParam>.Clear() Dictionary<string, IParam>.ContainsKey(string) Dictionary<string, IParam>.ContainsValue(IParam) Dictionary<string, IParam>.GetEnumerator() Dictionary<string, IParam>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<string, IParam>.OnDeserialization(object) Dictionary<string, IParam>.Remove(string) Dictionary<string, IParam>.Remove(string, out IParam) Dictionary<string, IParam>.TryGetValue(string, out IParam) Dictionary<string, IParam>.TryAdd(string, IParam) Dictionary<string, IParam>.EnsureCapacity(int) Dictionary<string, IParam>.TrimExcess() Dictionary<string, IParam>.TrimExcess(int) Dictionary<string, IParam>.Comparer Dictionary<string, IParam>.Count Dictionary<string, IParam>.Keys Dictionary<string, IParam>.Values Dictionary<string, IParam>.this[string] object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CvAttributeCollection(IDictionary<string, IParam>) public CvAttributeCollection(IDictionary<string, IParam> attributes) Parameters attributes IDictionary<string, IParam> CvAttributeCollection(IEnumerable<IParam>) public CvAttributeCollection(IEnumerable<IParam> attributes) Parameters attributes IEnumerable<IParam> Properties Attributes Returns all attributes as a list public FSharpList<IParam> Attributes { get; } Property Value FSharpList<IParam> Methods AddAttribute(IParam) Add an IParam as an attribute. Fails, if an attribute with the same key already exists public void AddAttribute(IParam param) Parameters param IParam ContainsAttribute(CvTerm) Returns true, if an attribute with the given term exists in the collection public bool ContainsAttribute(CvTerm term) Parameters term CvTerm Returns bool ContainsAttribute(string) Returns true, if an attribute with the given name exists in the collection public bool ContainsAttribute(string name) Parameters name string Returns bool GetAttribute(CvTerm) Retrieves an IParam attribute by its term, if it exists, else fails public IParam GetAttribute(CvTerm term) Parameters term CvTerm Returns IParam GetAttribute(string) Retrieves an IParam attribute by its name, if it exists, else fails public IParam GetAttribute(string name) Parameters name string Returns IParam IsStructuralChildOf(ICvBase) Returns true, if an attribute with the same term as the given parent exists in the collection public bool IsStructuralChildOf(ICvBase parent) Parameters parent ICvBase Returns bool TryAddAttribute(IParam) Add an IParam as an attribute. Does not fail, if an attribute with the same key already exists public bool TryAddAttribute(IParam param) Parameters param IParam Returns bool TryGetAttribute(CvTerm) Retrieves an IParam attribute by its term, if it exists, else returns None public FSharpOption<IParam> TryGetAttribute(CvTerm term) Parameters term CvTerm Returns FSharpOption<IParam> TryGetAttribute(string) Retrieves an IParam attribute by its name, if it exists, else returns None public FSharpOption<IParam> TryGetAttribute(string name) Parameters name string Returns FSharpOption<IParam> containsAttribute(string, IAttributeCollection) Returns true, if it implements a CvAttributeCollection and the attribute exists public static bool containsAttribute(string name, IAttributeCollection v) Parameters name string v IAttributeCollection Returns bool containsAttributeTerm(CvTerm, IAttributeCollection) Returns true, if it implements a CvAttributeCollection and the attribute exists public static bool containsAttributeTerm(CvTerm term, IAttributeCollection v) Parameters term CvTerm v IAttributeCollection Returns bool isStructuralChildOf(ICvBase, IAttributeCollection) Returns true, if an attribute with the same term as the given parent exists in the collection public static bool isStructuralChildOf(ICvBase parent, IAttributeCollection child) Parameters parent ICvBase child IAttributeCollection Returns bool tryAddAttribute(IParam, IAttributeCollection) Returns the attribute of the value, if it implements CvAttributeCollection and the attribute exists, else returns None public static bool tryAddAttribute(IParam param, IAttributeCollection v) Parameters param IParam v IAttributeCollection Returns bool tryGetAttribute(string, IAttributeCollection) Returns the attribute of the value, if it implements CvAttributeCollection and the attribute exists, else returns None public static FSharpOption<IParam> tryGetAttribute(string name, IAttributeCollection v) Parameters name string v IAttributeCollection Returns FSharpOption<IParam> tryGetAttributeByTerm(string, IAttributeCollection) Returns the attribute of the value, if it implements CvAttributeCollection and the attribute exists, else returns None public static FSharpOption<IParam> tryGetAttributeByTerm(string term, IAttributeCollection v) Parameters term string v IAttributeCollection Returns FSharpOption<IParam>"
  },
  "api/ControlledVocabulary.CvBase.html": {
    "href": "api/ControlledVocabulary.CvBase.html",
    "title": "Class CvBase",
    "keywords": "Class CvBase Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public class CvBase Inheritance object CvBase Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods equalsName<a, b>(a, b) Returns true, if the names of the given cv items match public static bool equalsName<a, b>(a cv1, b cv2) where a : ICvBase where b : ICvBase Parameters cv1 a cv2 b Returns bool Type Parameters a b equalsTerm<a>(CvTerm, a) Returns true, if the given term matches the term of the cv item public static bool equalsTerm<a>(CvTerm term, a cv) where a : ICvBase Parameters term CvTerm cv a Returns bool Type Parameters a equals<a, b>(a, b) Returns true, if the terms of the given cv items match public static bool equals<a, b>(a cv1, b cv2) where a : ICvBase where b : ICvBase Parameters cv1 a cv2 b Returns bool Type Parameters a b getCvAccession<a>(a) Returns the id of the cv item public static string getCvAccession<a>(a cv) where a : ICvBase Parameters cv a Returns string Type Parameters a getCvName<a>(a) Returns the name of the cv item public static string getCvName<a>(a cv) where a : ICvBase Parameters cv a Returns string Type Parameters a getCvRef<a>(a) Returns the reference of the cv item public static string getCvRef<a>(a cv) where a : ICvBase Parameters cv a Returns string Type Parameters a getTerm<a>(a) Returns the full term of the cv item public static CvTerm getTerm<a>(a cv) where a : ICvBase Parameters cv a Returns CvTerm Type Parameters a is<T>(ICvBase) Returns true, if the given cv item can be downcast public static bool @is<T>(ICvBase cv) where T : ICvBase Parameters cv ICvBase Returns bool Type Parameters T tryAs<T>(ICvBase) Returns Some Value of type 'T, if the given cv item can be downcast, else returns None public static FSharpOption<T> tryAs<T>(ICvBase cv) where T : ICvBase Parameters cv ICvBase Returns FSharpOption<T> Type Parameters T"
  },
  "api/ControlledVocabulary.CvContainer.html": {
    "href": "api/ControlledVocabulary.CvContainer.html",
    "title": "Class CvContainer",
    "keywords": "Class CvContainer Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Represents a collection of structured properties, annotated with a controlled vocabulary term. public class CvContainer : CvAttributeCollection, IDictionary<string, IParam>, ICollection<KeyValuePair<string, IParam>>, IDictionary, ICollection, IReadOnlyDictionary<string, IParam>, IReadOnlyCollection<KeyValuePair<string, IParam>>, IEnumerable<KeyValuePair<string, IParam>>, IEnumerable, ISerializable, IDeserializationCallback, ICvBase, IAttributeCollection Inheritance object Dictionary<string, IParam> CvAttributeCollection CvContainer Implements IDictionary<string, IParam> ICollection<KeyValuePair<string, IParam>> IDictionary ICollection IReadOnlyDictionary<string, IParam> IReadOnlyCollection<KeyValuePair<string, IParam>> IEnumerable<KeyValuePair<string, IParam>> IEnumerable ISerializable IDeserializationCallback ICvBase IAttributeCollection Inherited Members CvAttributeCollection.AddAttribute(IParam) CvAttributeCollection.TryAddAttribute(IParam) CvAttributeCollection.TryGetAttribute(string) CvAttributeCollection.TryGetAttribute(CvTerm) CvAttributeCollection.GetAttribute(string) CvAttributeCollection.GetAttribute(CvTerm) CvAttributeCollection.ContainsAttribute(string) CvAttributeCollection.ContainsAttribute(CvTerm) CvAttributeCollection.IsStructuralChildOf(ICvBase) CvAttributeCollection.isStructuralChildOf(ICvBase, IAttributeCollection) CvAttributeCollection.tryAddAttribute(IParam, IAttributeCollection) CvAttributeCollection.tryGetAttribute(string, IAttributeCollection) CvAttributeCollection.tryGetAttributeByTerm(string, IAttributeCollection) CvAttributeCollection.containsAttribute(string, IAttributeCollection) CvAttributeCollection.containsAttributeTerm(CvTerm, IAttributeCollection) CvAttributeCollection.Attributes Dictionary<string, IParam>.Add(string, IParam) Dictionary<string, IParam>.Clear() Dictionary<string, IParam>.ContainsKey(string) Dictionary<string, IParam>.ContainsValue(IParam) Dictionary<string, IParam>.GetEnumerator() Dictionary<string, IParam>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<string, IParam>.OnDeserialization(object) Dictionary<string, IParam>.Remove(string) Dictionary<string, IParam>.Remove(string, out IParam) Dictionary<string, IParam>.TryGetValue(string, out IParam) Dictionary<string, IParam>.TryAdd(string, IParam) Dictionary<string, IParam>.EnsureCapacity(int) Dictionary<string, IParam>.TrimExcess() Dictionary<string, IParam>.TrimExcess(int) Dictionary<string, IParam>.Comparer Dictionary<string, IParam>.Count Dictionary<string, IParam>.Keys Dictionary<string, IParam>.Values Dictionary<string, IParam>.this[string] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CvContainer(CvTerm) public CvContainer(CvTerm term) Parameters term CvTerm CvContainer(CvTerm, IDictionary<string, IParam>) public CvContainer(CvTerm term, IDictionary<string, IParam> attributes) Parameters term CvTerm attributes IDictionary<string, IParam> CvContainer(CvTerm, IEnumerable<IParam>) public CvContainer(CvTerm term, IEnumerable<IParam> attributes) Parameters term CvTerm attributes IEnumerable<IParam> CvContainer(string, string, string) public CvContainer(string cvAccession, string cvName, string cvRefUri) Parameters cvAccession string cvName string cvRefUri string CvContainer(string, string, string, IDictionary<string, IParam>) public CvContainer(string cvAccession, string cvName, string cvRefUri, IDictionary<string, IParam> attributes) Parameters cvAccession string cvName string cvRefUri string attributes IDictionary<string, IParam> CvContainer(string, string, string, IDictionary<string, IParam>, IDictionary<string, IEnumerable<ICvBase>>) public CvContainer(string cvAccession, string cvName, string cvRef, IDictionary<string, IParam> attributes, IDictionary<string, IEnumerable<ICvBase>> properties) Parameters cvAccession string cvName string cvRef string attributes IDictionary<string, IParam> properties IDictionary<string, IEnumerable<ICvBase>> CvContainer(string, string, string, IEnumerable<IParam>) public CvContainer(string cvAccession, string cvName, string cvRefUri, IEnumerable<IParam> attributes) Parameters cvAccession string cvName string cvRefUri string attributes IEnumerable<IParam> Properties Properties public IDictionary<string, IEnumerable<ICvBase>> Properties { get; } Property Value IDictionary<string, IEnumerable<ICvBase>> Methods ContainsProperty(string) public bool ContainsProperty(string propertyName) Parameters propertyName string Returns bool CountChildren() public int CountChildren() Returns int CountProperties() public int CountProperties() Returns int GetMany(string) Retrieves children with the given name of the CvContainer as sequence. Fails if the propertyName cannot be found. public IEnumerable<ICvBase> GetMany(string propertyName) Parameters propertyName string Returns IEnumerable<ICvBase> GetManyAs<T>(string) Retrieves children with the given name and which can be cast to the given type of the CvContainer as sequence. Fails if the propertyName cannot be found. public IEnumerable<T> GetManyAs<T>(string propertyName) where T : ICvBase Parameters propertyName string Returns IEnumerable<T> Type Parameters T GetManyContainers(string) Retrieves CvContainer children with the given name of the CvContainer as sequence. Fails if the propertyName cannot be found. public IEnumerable<CvContainer> GetManyContainers(string propertyName) Parameters propertyName string Returns IEnumerable<CvContainer> GetManyParams(string) Retrieves Param children with the given name of the CvContainer as sequence. Fails if the propertyName cannot be found. public IEnumerable<IParam> GetManyParams(string propertyName) Parameters propertyName string Returns IEnumerable<IParam> GetSingle(string) Retrieves child with the given name of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public ICvBase GetSingle(string propertyName) Parameters propertyName string Returns ICvBase GetSingleAs<T>(string) Retrieves child with the given name and which can be cast to the given type of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public T GetSingleAs<T>(string propertyName) where T : ICvBase Parameters propertyName string Returns T Type Parameters T GetSingleContainer(string) Retrieves CvContainer child with the given name of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public CvContainer GetSingleContainer(string propertyName) Parameters propertyName string Returns CvContainer GetSingleParam(string) Retrieves Param child with the given name of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public IParam GetSingleParam(string propertyName) Parameters propertyName string Returns IParam ToString() public override string ToString() Returns string TryGetMany(string) Retrieves children with the given name of the CvContainer as sequence. Returns None if the propertyName cannot be found. public FSharpOption<IEnumerable<ICvBase>> TryGetMany(string propertyName) Parameters propertyName string Returns FSharpOption<IEnumerable<ICvBase>> TryGetManyAs<T>(string) Retrieves children with the given name and which can be cast to the given type of the CvContainer as sequence. Returns None if the propertyName cannot be found. public FSharpOption<IEnumerable<T>> TryGetManyAs<T>(string propertyName) where T : ICvBase Parameters propertyName string Returns FSharpOption<IEnumerable<T>> Type Parameters T TryGetManyContainers(string) Retrieves CvContainer children with the given name of the CvContainer as sequence. Returns None if the propertyName cannot be found. public FSharpOption<IEnumerable<CvContainer>> TryGetManyContainers(string propertyName) Parameters propertyName string Returns FSharpOption<IEnumerable<CvContainer>> TryGetManyParams(string) Retrieves Param children with the given name of the CvContainer as sequence. Returns None if the propertyName cannot be found. public FSharpOption<IEnumerable<IParam>> TryGetManyParams(string propertyName) Parameters propertyName string Returns FSharpOption<IEnumerable<IParam>> TryGetSingle(string) Retrieves child with the given name of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public FSharpOption<ICvBase> TryGetSingle(string propertyName) Parameters propertyName string Returns FSharpOption<ICvBase> TryGetSingleAs<T>(string) Retrieves child with the given name and which can be cast to the given type of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public FSharpOption<T> TryGetSingleAs<T>(string propertyName) where T : ICvBase Parameters propertyName string Returns FSharpOption<T> Type Parameters T TryGetSingleContainer(string) Retrieves CvContainer child with the given name of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public FSharpOption<CvContainer> TryGetSingleContainer(string propertyName) Parameters propertyName string Returns FSharpOption<CvContainer> TryGetSingleParam(string) Retrieves Param child with the given name of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public FSharpOption<IParam> TryGetSingleParam(string propertyName) Parameters propertyName string Returns FSharpOption<IParam> addMany(IEnumerable<ICvBase>, CvContainer) Adds children as a property of the CvContainer. If values with the same key already exist in the container, appends the new child public static void addMany(IEnumerable<ICvBase> values, CvContainer cvContainer) Parameters values IEnumerable<ICvBase> cvContainer CvContainer addSingle(ICvBase, CvContainer) Adds a child as a property of the CvContainer. If a value with the same key already exist in the container, appends the new child public static void addSingle(ICvBase value, CvContainer cvContainer) Parameters value ICvBase cvContainer CvContainer containsProperty(string, CvContainer) public static bool containsProperty(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns bool countChildren(CvContainer) public static int countChildren(CvContainer container) Parameters container CvContainer Returns int countProperties(CvContainer) public static int countProperties(CvContainer container) Parameters container CvContainer Returns int getMany(string, CvContainer) Retrieves children with the given name of the CvContainer as sequence. Fails if the propertyName cannot be found. public static IEnumerable<ICvBase> getMany(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns IEnumerable<ICvBase> getManyAs<T>(string, CvContainer) Retrieves children with the given name and which can be cast to the given type of the CvContainer as sequence. Fails if the propertyName cannot be found. public static IEnumerable<T> getManyAs<T>(string propertyName, CvContainer container) where T : ICvBase Parameters propertyName string container CvContainer Returns IEnumerable<T> Type Parameters T getManyContainers(string, CvContainer) Retrieves CvContainer children with the given name of the CvContainer as sequence. Fails if the propertyName cannot be found. public static IEnumerable<CvContainer> getManyContainers(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns IEnumerable<CvContainer> getManyParams(string, CvContainer) Retrieves Param children with the given name of the CvContainer as sequence. Fails if the propertyName cannot be found. public static IEnumerable<IParam> getManyParams(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns IEnumerable<IParam> getSingle(string, CvContainer) Retrieves child with the given name of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public static ICvBase getSingle(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns ICvBase getSingleAs<T>(string, CvContainer) Retrieves child with the given name and which can be cast to the given type of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public static T getSingleAs<T>(string propertyName, CvContainer container) where T : ICvBase Parameters propertyName string container CvContainer Returns T Type Parameters T getSingleContainer(string, CvContainer) Retrieves CvContainer child with the given name of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public static CvContainer getSingleContainer(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns CvContainer getSingleParam(string, CvContainer) Retrieves Param child with the given name of the CvContainer. Fails if there is not exactly one child with the given name or if the propertyName cannot be found. public static IParam getSingleParam(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns IParam setMany(IEnumerable<ICvBase>, CvContainer) Sets children as a property of the CvContainer. These children are supposed to all have the same name, as they will be grouped into one property of the container, accessible by this shared name. Fails if values has elements with different names. public static void setMany(IEnumerable<ICvBase> values, CvContainer cvContainer) Parameters values IEnumerable<ICvBase> cvContainer CvContainer setSingle(ICvBase, CvContainer) Sets a single child as a property of the CvContainer, accessible by its name. public static IDictionary<string, IEnumerable<ICvBase>> setSingle(ICvBase value, CvContainer cvContainer) Parameters value ICvBase cvContainer CvContainer Returns IDictionary<string, IEnumerable<ICvBase>> tryCvContainer(ICvBase) Returns Some CvContainer, if the given cv item can be downcast, else returns None public static FSharpOption<CvContainer> tryCvContainer(ICvBase cv) Parameters cv ICvBase Returns FSharpOption<CvContainer> tryGetMany(string, CvContainer) Retrieves children with the given name of the CvContainer as sequence. Returns None if the propertyName cannot be found. public static FSharpOption<IEnumerable<ICvBase>> tryGetMany(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns FSharpOption<IEnumerable<ICvBase>> tryGetManyAs<T>(string, CvContainer) Retrieves children with the given name and which can be cast to the given type of the CvContainer as sequence. Returns None if the propertyName cannot be found. public static FSharpOption<IEnumerable<T>> tryGetManyAs<T>(string propertyName, CvContainer container) where T : ICvBase Parameters propertyName string container CvContainer Returns FSharpOption<IEnumerable<T>> Type Parameters T tryGetManyContainers(string, CvContainer) Retrieves CvContainer children with the given name of the CvContainer as sequence. Returns None if the propertyName cannot be found. public static FSharpOption<IEnumerable<CvContainer>> tryGetManyContainers(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns FSharpOption<IEnumerable<CvContainer>> tryGetManyParams(string, CvContainer) Retrieves Param children with the given name of the CvContainer as sequence. Returns None if the propertyName cannot be found. public static FSharpOption<IEnumerable<IParam>> tryGetManyParams(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns FSharpOption<IEnumerable<IParam>> tryGetSingle(string, CvContainer) Retrieves child with the given name of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public static FSharpOption<ICvBase> tryGetSingle(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns FSharpOption<ICvBase> tryGetSingleAs<T>(string, CvContainer) Retrieves child with the given name and which can be cast to the given type of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public static FSharpOption<T> tryGetSingleAs<T>(string propertyName, CvContainer container) where T : ICvBase Parameters propertyName string container CvContainer Returns FSharpOption<T> Type Parameters T tryGetSingleContainer(string, CvContainer) Retrieves CvContainer child with the given name of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public static FSharpOption<CvContainer> tryGetSingleContainer(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns FSharpOption<CvContainer> tryGetSingleParam(string, CvContainer) Retrieves Param child with the given name of the CvContainer. Returns None if there is not exactly one child with the given name or if the propertyName cannot be found. public static FSharpOption<IParam> tryGetSingleParam(string propertyName, CvContainer container) Parameters propertyName string container CvContainer Returns FSharpOption<IParam>"
  },
  "api/ControlledVocabulary.CvObject-1.html": {
    "href": "api/ControlledVocabulary.CvObject-1.html",
    "title": "Class CvObject<T>",
    "keywords": "Class CvObject<T> Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Represents a generic object, annotated with a controlled vocabulary term public class CvObject<T> : CvAttributeCollection, IDictionary<string, IParam>, ICollection<KeyValuePair<string, IParam>>, IDictionary, ICollection, IReadOnlyDictionary<string, IParam>, IReadOnlyCollection<KeyValuePair<string, IParam>>, IEnumerable<KeyValuePair<string, IParam>>, IEnumerable, ISerializable, IDeserializationCallback, ICvBase, IAttributeCollection Type Parameters T Inheritance object Dictionary<string, IParam> CvAttributeCollection CvObject<T> Implements IDictionary<string, IParam> ICollection<KeyValuePair<string, IParam>> IDictionary ICollection IReadOnlyDictionary<string, IParam> IReadOnlyCollection<KeyValuePair<string, IParam>> IEnumerable<KeyValuePair<string, IParam>> IEnumerable ISerializable IDeserializationCallback ICvBase IAttributeCollection Inherited Members CvAttributeCollection.AddAttribute(IParam) CvAttributeCollection.TryAddAttribute(IParam) CvAttributeCollection.TryGetAttribute(string) CvAttributeCollection.TryGetAttribute(CvTerm) CvAttributeCollection.GetAttribute(string) CvAttributeCollection.GetAttribute(CvTerm) CvAttributeCollection.ContainsAttribute(string) CvAttributeCollection.ContainsAttribute(CvTerm) CvAttributeCollection.IsStructuralChildOf(ICvBase) CvAttributeCollection.isStructuralChildOf(ICvBase, IAttributeCollection) CvAttributeCollection.tryAddAttribute(IParam, IAttributeCollection) CvAttributeCollection.tryGetAttribute(string, IAttributeCollection) CvAttributeCollection.tryGetAttributeByTerm(string, IAttributeCollection) CvAttributeCollection.containsAttribute(string, IAttributeCollection) CvAttributeCollection.containsAttributeTerm(CvTerm, IAttributeCollection) CvAttributeCollection.Attributes Dictionary<string, IParam>.Add(string, IParam) Dictionary<string, IParam>.Clear() Dictionary<string, IParam>.ContainsKey(string) Dictionary<string, IParam>.ContainsValue(IParam) Dictionary<string, IParam>.GetEnumerator() Dictionary<string, IParam>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<string, IParam>.OnDeserialization(object) Dictionary<string, IParam>.Remove(string) Dictionary<string, IParam>.Remove(string, out IParam) Dictionary<string, IParam>.TryGetValue(string, out IParam) Dictionary<string, IParam>.TryAdd(string, IParam) Dictionary<string, IParam>.EnsureCapacity(int) Dictionary<string, IParam>.TrimExcess() Dictionary<string, IParam>.TrimExcess(int) Dictionary<string, IParam>.Comparer Dictionary<string, IParam>.Count Dictionary<string, IParam>.Keys Dictionary<string, IParam>.Values Dictionary<string, IParam>.this[string] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CvObject(CvTerm, T, Dictionary<string, IParam>) public CvObject(CvTerm term, T @object, Dictionary<string, IParam> attributes) Parameters term CvTerm object T attributes Dictionary<string, IParam> CvObject(string, string, string, T, Dictionary<string, IParam>) public CvObject(string cvAccession, string cvName, string cvRef, T @object, Dictionary<string, IParam> attributes) Parameters cvAccession string cvName string cvRef string object T attributes Dictionary<string, IParam> Properties Object public T Object { get; } Property Value T Methods ToString() public override string ToString() Returns string"
  },
  "api/ControlledVocabulary.CvParam.html": {
    "href": "api/ControlledVocabulary.CvParam.html",
    "title": "Class CvParam",
    "keywords": "Class CvParam Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Represents a structured value, annotated with a controlled vocabulary term Attributes can be used to further describe the CvParam public class CvParam : CvAttributeCollection, IDictionary<string, IParam>, ICollection<KeyValuePair<string, IParam>>, IDictionary, ICollection, IReadOnlyDictionary<string, IParam>, IReadOnlyCollection<KeyValuePair<string, IParam>>, IEnumerable<KeyValuePair<string, IParam>>, IEnumerable, ISerializable, IDeserializationCallback, IParam, IParamBase, ICvBase, IAttributeCollection Inheritance object Dictionary<string, IParam> CvAttributeCollection CvParam Implements IDictionary<string, IParam> ICollection<KeyValuePair<string, IParam>> IDictionary ICollection IReadOnlyDictionary<string, IParam> IReadOnlyCollection<KeyValuePair<string, IParam>> IEnumerable<KeyValuePair<string, IParam>> IEnumerable ISerializable IDeserializationCallback IParam IParamBase ICvBase IAttributeCollection Inherited Members CvAttributeCollection.AddAttribute(IParam) CvAttributeCollection.TryAddAttribute(IParam) CvAttributeCollection.TryGetAttribute(string) CvAttributeCollection.TryGetAttribute(CvTerm) CvAttributeCollection.GetAttribute(string) CvAttributeCollection.GetAttribute(CvTerm) CvAttributeCollection.ContainsAttribute(string) CvAttributeCollection.ContainsAttribute(CvTerm) CvAttributeCollection.IsStructuralChildOf(ICvBase) CvAttributeCollection.isStructuralChildOf(ICvBase, IAttributeCollection) CvAttributeCollection.tryAddAttribute(IParam, IAttributeCollection) CvAttributeCollection.tryGetAttribute(string, IAttributeCollection) CvAttributeCollection.tryGetAttributeByTerm(string, IAttributeCollection) CvAttributeCollection.containsAttribute(string, IAttributeCollection) CvAttributeCollection.containsAttributeTerm(CvTerm, IAttributeCollection) CvAttributeCollection.Attributes Dictionary<string, IParam>.Add(string, IParam) Dictionary<string, IParam>.Clear() Dictionary<string, IParam>.ContainsKey(string) Dictionary<string, IParam>.ContainsValue(IParam) Dictionary<string, IParam>.GetEnumerator() Dictionary<string, IParam>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<string, IParam>.OnDeserialization(object) Dictionary<string, IParam>.Remove(string) Dictionary<string, IParam>.Remove(string, out IParam) Dictionary<string, IParam>.TryGetValue(string, out IParam) Dictionary<string, IParam>.TryAdd(string, IParam) Dictionary<string, IParam>.EnsureCapacity(int) Dictionary<string, IParam>.TrimExcess() Dictionary<string, IParam>.TrimExcess(int) Dictionary<string, IParam>.Comparer Dictionary<string, IParam>.Count Dictionary<string, IParam>.Keys Dictionary<string, IParam>.Values Dictionary<string, IParam>.this[string] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CvParam(CvTerm, ParamValue) public CvParam(CvTerm cvTerm, ParamValue pv) Parameters cvTerm CvTerm pv ParamValue CvParam(CvTerm, ParamValue, IEnumerable<IParam>) public CvParam(CvTerm term, ParamValue pv, IEnumerable<IParam> attributes) Parameters term CvTerm pv ParamValue attributes IEnumerable<IParam> CvParam(CvTerm, IConvertible) public CvParam(CvTerm cvTerm, IConvertible v) Parameters cvTerm CvTerm v IConvertible CvParam(string, string, string, ParamValue) public CvParam(string id, string name, string @ref, ParamValue pv) Parameters id string name string ref string pv ParamValue CvParam(string, string, string, ParamValue, IDictionary<string, IParam>) public CvParam(string cvAccession, string cvName, string cvRef, ParamValue paramValue, IDictionary<string, IParam> attributes) Parameters cvAccession string cvName string cvRef string paramValue ParamValue attributes IDictionary<string, IParam> CvParam(string, string, string, ParamValue, IEnumerable<IParam>) public CvParam(string id, string name, string @ref, ParamValue pv, IEnumerable<IParam> attributes) Parameters id string name string ref string pv ParamValue attributes IEnumerable<IParam> CvParam(string, string, string, IConvertible) public CvParam(string id, string name, string @ref, IConvertible v) Parameters id string name string ref string v IConvertible Properties Accession public string Accession { get; } Property Value string DisplayText public string DisplayText { get; } Property Value string HasAttributes public bool HasAttributes { get; } Property Value bool Name public string Name { get; } Property Value string RefUri public string RefUri { get; } Property Value string Value public ParamValue Value { get; } Property Value ParamValue Methods Equals(CvParam) public bool Equals(CvParam cvp) Parameters cvp CvParam Returns bool Equals(CvTerm) public bool Equals(CvTerm term) Parameters term CvTerm Returns bool Equals(ICvBase) public bool Equals(ICvBase cv) Parameters cv ICvBase Returns bool ToString() public override string ToString() Returns string WithValue(ParamValue) public CvParam WithValue(ParamValue v) Parameters v ParamValue Returns CvParam equals(CvParam, CvParam) Returns true, if the terms of the given param items match public static bool equals(CvParam cvp1, CvParam cvp2) Parameters cvp1 CvParam cvp2 CvParam Returns bool equalsName(CvParam, CvParam) Returns true, if the names of the given param items match public static bool equalsName(CvParam cvp1, CvParam cvp2) Parameters cvp1 CvParam cvp2 CvParam Returns bool equalsTerm(CvTerm, CvParam) Returns true, if the given term matches the term of the cv item public static bool equalsTerm(CvTerm term, CvParam cvp) Parameters term CvTerm cvp CvParam Returns bool fromCategory(CvTerm, CvTerm) Creates a CvParam from a category and a value coming from a controlled vocabulary. public static CvParam fromCategory(CvTerm category, CvTerm term) Parameters category CvTerm term CvTerm Returns CvParam fromValueWithUnit<T>(CvTerm, T, CvTerm) Creates a CvParam from a category, a simple value and a unit coming from a controlled vocabulary. public static CvParam fromValueWithUnit<T>(CvTerm category, T v, CvTerm unit) where T : IConvertible Parameters category CvTerm v T unit CvTerm Returns CvParam Type Parameters T fromValue<T>(CvTerm, T) Create a CvParam from a category and a simple value public static CvParam fromValue<T>(CvTerm category, T v) where T : IConvertible Parameters category CvTerm v T Returns CvParam Type Parameters T getAttributes<a>(CvParam) public static IEnumerable<a> getAttributes<a>(CvParam param) Parameters param CvParam Returns IEnumerable<a> Type Parameters a getCvAccession(CvParam) Returns the id of the cv item public static string getCvAccession(CvParam cvp) Parameters cvp CvParam Returns string getCvName(CvParam) Returns the name of the cv item public static string getCvName(CvParam cvp) Parameters cvp CvParam Returns string getCvRef(CvParam) Returns the reference of the cv item public static string getCvRef(CvParam cvp) Parameters cvp CvParam Returns string getParamValue(CvParam) Returns the value of the Param as a ParamValue public static ParamValue getParamValue(CvParam cvp) Parameters cvp CvParam Returns ParamValue getTerm(CvParam) Returns the full term of the cv item public static CvTerm getTerm(CvParam cvp) Parameters cvp CvParam Returns CvTerm getValue(CvParam) Returns the value of the Param as IConvertible public static IConvertible getValue(CvParam cvp) Parameters cvp CvParam Returns IConvertible getValueAsInt(CvParam) Returns the value of the Param as int if possible, else fails public static int getValueAsInt(CvParam cvp) Parameters cvp CvParam Returns int getValueAsString(CvParam) Returns the value of the Param as string public static string getValueAsString(CvParam cvp) Parameters cvp CvParam Returns string getValueAsTerm(CvParam) Returns the value of the Param as a term public static CvTerm getValueAsTerm(CvParam cvp) Parameters cvp CvParam Returns CvTerm mapValue(FSharpFunc<ParamValue, ParamValue>, CvParam) public static CvParam mapValue(FSharpFunc<ParamValue, ParamValue> f, CvParam cvp) Parameters f FSharpFunc<ParamValue, ParamValue> cvp CvParam Returns CvParam tryAddAccession(string, CvParam) public static FSharpOption<CvParam> tryAddAccession(string acc, CvParam cvp) Parameters acc string cvp CvParam Returns FSharpOption<CvParam> tryAddName(string, CvParam) public static FSharpOption<CvParam> tryAddName(string name, CvParam cvp) Parameters name string cvp CvParam Returns FSharpOption<CvParam> tryAddReference(string, CvParam) public static FSharpOption<CvParam> tryAddReference(string @ref, CvParam cvp) Parameters ref string cvp CvParam Returns FSharpOption<CvParam> tryAddUnit(CvTerm, CvParam) public static FSharpOption<CvParam> tryAddUnit(CvTerm unit, CvParam cvp) Parameters unit CvTerm cvp CvParam Returns FSharpOption<CvParam> tryGetCvUnit(CvParam) public static FSharpOption<CvTerm> tryGetCvUnit(CvParam cvp) Parameters cvp CvParam Returns FSharpOption<CvTerm> tryGetCvUnitTermAccession(CvParam) public static FSharpOption<string> tryGetCvUnitTermAccession(CvParam cvp) Parameters cvp CvParam Returns FSharpOption<string> tryGetCvUnitTermName(CvParam) public static FSharpOption<string> tryGetCvUnitTermName(CvParam cvp) Parameters cvp CvParam Returns FSharpOption<string> tryGetCvUnitTermRef(CvParam) public static FSharpOption<string> tryGetCvUnitTermRef(CvParam cvp) Parameters cvp CvParam Returns FSharpOption<string> tryGetCvUnitValue(CvParam) public static FSharpOption<IConvertible> tryGetCvUnitValue(CvParam cvp) Parameters cvp CvParam Returns FSharpOption<IConvertible> tryGetValueAccession(CvParam) public static FSharpOption<string> tryGetValueAccession(CvParam cvp) Parameters cvp CvParam Returns FSharpOption<string> tryGetValueRef(CvParam) public static FSharpOption<string> tryGetValueRef(CvParam cvp) Parameters cvp CvParam Returns FSharpOption<string> tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>>, CvParam) public static FSharpOption<CvParam> tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>> f, CvParam cvp) Parameters f FSharpFunc<ParamValue, FSharpOption<ParamValue>> cvp CvParam Returns FSharpOption<CvParam>"
  },
  "api/ControlledVocabulary.CvParamExtensions.html": {
    "href": "api/ControlledVocabulary.CvParamExtensions.html",
    "title": "Class CvParamExtensions",
    "keywords": "Class CvParamExtensions Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public static class CvParamExtensions Inheritance object CvParamExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CvBase.isCvParam.Static(ICvBase) public static bool CvBase.isCvParam.Static(ICvBase cv) Parameters cv ICvBase Returns bool CvBase.tryCvParam.Static(ICvBase) public static FSharpOption<CvParam> CvBase.tryCvParam.Static(ICvBase cv) Parameters cv ICvBase Returns FSharpOption<CvParam> Param.tryCvParam.Static(IParam) public static FSharpOption<CvParam> Param.tryCvParam.Static(IParam cv) Parameters cv IParam Returns FSharpOption<CvParam> ParamBase.tryCvParam.Static(IParamBase) public static FSharpOption<CvParam> ParamBase.tryCvParam.Static(IParamBase cv) Parameters cv IParamBase Returns FSharpOption<CvParam>"
  },
  "api/ControlledVocabulary.CvTerm.html": {
    "href": "api/ControlledVocabulary.CvTerm.html",
    "title": "Class CvTerm",
    "keywords": "Class CvTerm Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Represents a term from a controlled vocabulary (Cv) in the form of: id|accession ; name|value ; refUri public sealed class CvTerm : IEquatable<CvTerm>, IStructuralEquatable, IComparable<CvTerm>, IComparable, IStructuralComparable Inheritance object CvTerm Implements IEquatable<CvTerm> IStructuralEquatable IComparable<CvTerm> IComparable IStructuralComparable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors CvTerm(string, string, string) public CvTerm(string accession, string name, string refUri) Parameters accession string name string refUri string Properties Accession public string Accession { get; } Property Value string Name public string Name { get; } Property Value string RefUri public string RefUri { get; } Property Value string Methods CompareTo(CvTerm) public override sealed int CompareTo(CvTerm obj) Parameters obj CvTerm Returns int CompareTo(object) public override sealed int CompareTo(object obj) Parameters obj object Returns int CompareTo(object, IComparer) public override sealed int CompareTo(object obj, IComparer comp) Parameters obj object comp IComparer Returns int Equals(CvTerm) public override sealed bool Equals(CvTerm obj) Parameters obj CvTerm Returns bool Equals(object) public override sealed bool Equals(object obj) Parameters obj object Returns bool Equals(object, IEqualityComparer) public override sealed bool Equals(object obj, IEqualityComparer comp) Parameters obj object comp IEqualityComparer Returns bool GetHashCode() public override sealed int GetHashCode() Returns int GetHashCode(IEqualityComparer) public override sealed int GetHashCode(IEqualityComparer comp) Parameters comp IEqualityComparer Returns int ToString() public override string ToString() Returns string create(string) public static CvTerm create(string name) Parameters name string Returns CvTerm create(string, string, string) public static CvTerm create(string accession, string name, string @ref) Parameters accession string name string ref string Returns CvTerm"
  },
  "api/ControlledVocabulary.IAttributeCollection.html": {
    "href": "api/ControlledVocabulary.IAttributeCollection.html",
    "title": "Interface IAttributeCollection",
    "keywords": "Interface IAttributeCollection Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public interface IAttributeCollection Properties HasAttributes bool HasAttributes { get; } Property Value bool"
  },
  "api/ControlledVocabulary.ICvBase.html": {
    "href": "api/ControlledVocabulary.ICvBase.html",
    "title": "Interface ICvBase",
    "keywords": "Interface ICvBase Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Interface ensures the propterties necessary for CvTerm public interface ICvBase : IAttributeCollection Inherited Members IAttributeCollection.HasAttributes Properties Accession string Accession { get; } Property Value string Name string Name { get; } Property Value string RefUri string RefUri { get; } Property Value string"
  },
  "api/ControlledVocabulary.IParam.html": {
    "href": "api/ControlledVocabulary.IParam.html",
    "title": "Interface IParam",
    "keywords": "Interface IParam Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public interface IParam : IParamBase, ICvBase, IAttributeCollection Inherited Members IParamBase.WithValue(ParamValue) IParamBase.Value ICvBase.Accession ICvBase.Name ICvBase.RefUri IAttributeCollection.HasAttributes"
  },
  "api/ControlledVocabulary.IParamBase.html": {
    "href": "api/ControlledVocabulary.IParamBase.html",
    "title": "Interface IParamBase",
    "keywords": "Interface IParamBase Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Interface ensures the value as ParamValue<'T> public interface IParamBase Properties Value ParamValue Value { get; } Property Value ParamValue Methods WithValue(ParamValue) IParamBase WithValue(ParamValue value) Parameters value ParamValue Returns IParamBase"
  },
  "api/ControlledVocabulary.IParamExtensions.html": {
    "href": "api/ControlledVocabulary.IParamExtensions.html",
    "title": "Class IParamExtensions",
    "keywords": "Class IParamExtensions Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public static class IParamExtensions Inheritance object IParamExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CvBase.tryParam.Static(ICvBase) public static FSharpOption<IParam> CvBase.tryParam.Static(ICvBase cv) Parameters cv ICvBase Returns FSharpOption<IParam> ParamBase.tryParam.Static(IParamBase) public static FSharpOption<IParam> ParamBase.tryParam.Static(IParamBase cv) Parameters cv IParamBase Returns FSharpOption<IParam>"
  },
  "api/ControlledVocabulary.Param.html": {
    "href": "api/ControlledVocabulary.Param.html",
    "title": "Class Param",
    "keywords": "Class Param Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public class Param Inheritance object Param Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods equals(IParam, IParam) Returns true, if the terms of the given param items match public static bool equals(IParam param1, IParam param2) Parameters param1 IParam param2 IParam Returns bool equalsName(IParam, IParam) Returns true, if the names of the given param items match public static bool equalsName(IParam param1, IParam param2) Parameters param1 IParam param2 IParam Returns bool equalsTerm(CvTerm, IParam) Returns true, if the given term matches the term of the cv item public static bool equalsTerm(CvTerm term, IParam param) Parameters term CvTerm param IParam Returns bool getCvAccession(IParam) Returns the id of the cv item public static string getCvAccession(IParam param) Parameters param IParam Returns string getCvName(IParam) Returns the name of the cv item public static string getCvName(IParam param) Parameters param IParam Returns string getCvRef(IParam) Returns the reference of the cv item public static string getCvRef(IParam param) Parameters param IParam Returns string getParamValue(IParam) Returns the value of the Param as a ParamValue public static ParamValue getParamValue(IParam param) Parameters param IParam Returns ParamValue getTerm(IParam) Returns the full term of the cv item public static CvTerm getTerm(IParam param) Parameters param IParam Returns CvTerm getValue(IParam) Returns the value of the Param as IConvertible public static IConvertible getValue(IParam param) Parameters param IParam Returns IConvertible getValueAsInt(IParam) Returns the value of the Param as int if possible, else fails public static int getValueAsInt(IParam param) Parameters param IParam Returns int getValueAsString(IParam) Returns the value of the Param as string public static string getValueAsString(IParam param) Parameters param IParam Returns string getValueAsTerm(IParam) Returns the value of the Param as a term public static CvTerm getValueAsTerm(IParam param) Parameters param IParam Returns CvTerm is<T>(IParam) Returns true, if the given param item can be downcast public static bool @is<T>(IParam param) where T : IParam Parameters param IParam Returns bool Type Parameters T mapValue(FSharpFunc<ParamValue, ParamValue>, IParam) public static IParam mapValue(FSharpFunc<ParamValue, ParamValue> f, IParam param) Parameters f FSharpFunc<ParamValue, ParamValue> param IParam Returns IParam tryAddAccession(string, IParamBase) public static FSharpOption<IParam> tryAddAccession(string acc, IParamBase param) Parameters acc string param IParamBase Returns FSharpOption<IParam> tryAddName(string, IParamBase) public static FSharpOption<IParam> tryAddName(string name, IParamBase param) Parameters name string param IParamBase Returns FSharpOption<IParam> tryAddReference(string, IParamBase) public static FSharpOption<IParam> tryAddReference(string @ref, IParamBase param) Parameters ref string param IParamBase Returns FSharpOption<IParam> tryAddUnit(CvTerm, IParamBase) public static FSharpOption<IParam> tryAddUnit(CvTerm unit, IParamBase param) Parameters unit CvTerm param IParamBase Returns FSharpOption<IParam> tryAs<T>(IParam) Returns Some Value of type 'T, if the given param item can be downcast, else returns None public static FSharpOption<T> tryAs<T>(IParam param) where T : IParam Parameters param IParam Returns FSharpOption<T> Type Parameters T tryGetCvUnit(IParam) public static FSharpOption<CvTerm> tryGetCvUnit(IParam param) Parameters param IParam Returns FSharpOption<CvTerm> tryGetCvUnitTermAccession(IParam) public static FSharpOption<string> tryGetCvUnitTermAccession(IParam param) Parameters param IParam Returns FSharpOption<string> tryGetCvUnitTermName(IParam) public static FSharpOption<string> tryGetCvUnitTermName(IParam param) Parameters param IParam Returns FSharpOption<string> tryGetCvUnitTermRef(IParam) public static FSharpOption<string> tryGetCvUnitTermRef(IParam param) Parameters param IParam Returns FSharpOption<string> tryGetCvUnitValue(IParam) public static FSharpOption<IConvertible> tryGetCvUnitValue(IParam param) Parameters param IParam Returns FSharpOption<IConvertible> tryGetValueAccession(IParam) public static FSharpOption<string> tryGetValueAccession(IParam param) Parameters param IParam Returns FSharpOption<string> tryGetValueRef(IParam) public static FSharpOption<string> tryGetValueRef(IParam param) Parameters param IParam Returns FSharpOption<string> tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>>, IParamBase) public static FSharpOption<IParam> tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>> f, IParamBase param) Parameters f FSharpFunc<ParamValue, FSharpOption<ParamValue>> param IParamBase Returns FSharpOption<IParam>"
  },
  "api/ControlledVocabulary.ParamBase.html": {
    "href": "api/ControlledVocabulary.ParamBase.html",
    "title": "Class ParamBase",
    "keywords": "Class ParamBase Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public class ParamBase Inheritance object ParamBase Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods getParamValue(IParamBase) Returns the value of the Param as a ParamValue public static ParamValue getParamValue(IParamBase param) Parameters param IParamBase Returns ParamValue getValue(IParamBase) Returns the value of the Param as IConvertible public static IConvertible getValue(IParamBase param) Parameters param IParamBase Returns IConvertible getValueAsInt(IParamBase) Returns the value of the Param as int if possible, else fails public static int getValueAsInt(IParamBase param) Parameters param IParamBase Returns int getValueAsString(IParamBase) Returns the value of the Param as string public static string getValueAsString(IParamBase param) Parameters param IParamBase Returns string getValueAsTerm(IParamBase) Returns the value of the Param as a term public static CvTerm getValueAsTerm(IParamBase param) Parameters param IParamBase Returns CvTerm mapValue(FSharpFunc<ParamValue, ParamValue>, IParamBase) public static IParamBase mapValue(FSharpFunc<ParamValue, ParamValue> f, IParamBase param) Parameters f FSharpFunc<ParamValue, ParamValue> param IParamBase Returns IParamBase tryAddAccession(string, IParamBase) public static FSharpOption<IParamBase> tryAddAccession(string acc, IParamBase param) Parameters acc string param IParamBase Returns FSharpOption<IParamBase> tryAddName(string, IParamBase) public static FSharpOption<IParamBase> tryAddName(string value, IParamBase param) Parameters value string param IParamBase Returns FSharpOption<IParamBase> tryAddReference(string, IParamBase) public static FSharpOption<IParamBase> tryAddReference(string @ref, IParamBase param) Parameters ref string param IParamBase Returns FSharpOption<IParamBase> tryAddUnit(CvTerm, IParamBase) public static FSharpOption<IParamBase> tryAddUnit(CvTerm unit, IParamBase param) Parameters unit CvTerm param IParamBase Returns FSharpOption<IParamBase> tryGetCvUnitTermAccession<b>(b) public static FSharpOption<string> tryGetCvUnitTermAccession<b>(b param) where b : IParamBase Parameters param b Returns FSharpOption<string> Type Parameters b tryGetCvUnitTermName<c>(c) public static FSharpOption<string> tryGetCvUnitTermName<c>(c param) where c : IParamBase Parameters param c Returns FSharpOption<string> Type Parameters c tryGetCvUnitTermRef<a>(a) public static FSharpOption<string> tryGetCvUnitTermRef<a>(a param) where a : IParamBase Parameters param a Returns FSharpOption<string> Type Parameters a tryGetCvUnitValue<d>(d) public static FSharpOption<IConvertible> tryGetCvUnitValue<d>(d param) where d : IParamBase Parameters param d Returns FSharpOption<IConvertible> Type Parameters d tryGetCvUnit<e>(e) public static FSharpOption<CvTerm> tryGetCvUnit<e>(e param) where e : IParamBase Parameters param e Returns FSharpOption<CvTerm> Type Parameters e tryGetValueAccession<g>(g) public static FSharpOption<string> tryGetValueAccession<g>(g param) where g : IParamBase Parameters param g Returns FSharpOption<string> Type Parameters g tryGetValueRef<f>(f) public static FSharpOption<string> tryGetValueRef<f>(f param) where f : IParamBase Parameters param f Returns FSharpOption<string> Type Parameters f tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>>, IParamBase) public static FSharpOption<IParamBase> tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>> f, IParamBase param) Parameters f FSharpFunc<ParamValue, FSharpOption<ParamValue>> param IParamBase Returns FSharpOption<IParamBase>"
  },
  "api/ControlledVocabulary.ParamValue.CvValue.html": {
    "href": "api/ControlledVocabulary.ParamValue.CvValue.html",
    "title": "Class ParamValue.CvValue",
    "keywords": "Class ParamValue.CvValue Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public class ParamValue.CvValue : ParamValue, IEquatable<ParamValue>, IStructuralEquatable Inheritance object ParamValue ParamValue.CvValue Implements IEquatable<ParamValue> IStructuralEquatable Inherited Members ParamValue.NewValue(IConvertible) ParamValue.NewCvValue(CvTerm) ParamValue.NewWithCvUnitAccession(IConvertible, CvTerm) ParamValue.ToString() ParamValue.GetHashCode(IEqualityComparer) ParamValue.GetHashCode() ParamValue.Equals(object, IEqualityComparer) ParamValue.getValue(ParamValue) ParamValue.getValueAsString(ParamValue) ParamValue.getValueAsInt(ParamValue) ParamValue.getValueAsTerm(ParamValue) ParamValue.tryGetUnit(ParamValue) ParamValue.tryAddName(string, ParamValue) ParamValue.tryAddAccession(string, ParamValue) ParamValue.tryAddReference(string, ParamValue) ParamValue.tryAddUnit(CvTerm, ParamValue) ParamValue.Equals(ParamValue) ParamValue.Equals(object) ParamValue.Tag ParamValue.IsValue ParamValue.IsCvValue ParamValue.IsWithCvUnitAccession object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Properties cv public CvTerm cv { get; } Property Value CvTerm"
  },
  "api/ControlledVocabulary.ParamValue.Tags.html": {
    "href": "api/ControlledVocabulary.ParamValue.Tags.html",
    "title": "Class ParamValue.Tags",
    "keywords": "Class ParamValue.Tags Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public static class ParamValue.Tags Inheritance object ParamValue.Tags Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields CvValue public const int CvValue = 1 Field Value int Value public const int Value = 0 Field Value int WithCvUnitAccession public const int WithCvUnitAccession = 2 Field Value int"
  },
  "api/ControlledVocabulary.ParamValue.Value.html": {
    "href": "api/ControlledVocabulary.ParamValue.Value.html",
    "title": "Class ParamValue.Value",
    "keywords": "Class ParamValue.Value Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public class ParamValue.Value : ParamValue, IEquatable<ParamValue>, IStructuralEquatable Inheritance object ParamValue ParamValue.Value Implements IEquatable<ParamValue> IStructuralEquatable Inherited Members ParamValue.NewValue(IConvertible) ParamValue.NewCvValue(CvTerm) ParamValue.NewWithCvUnitAccession(IConvertible, CvTerm) ParamValue.ToString() ParamValue.GetHashCode(IEqualityComparer) ParamValue.GetHashCode() ParamValue.Equals(object, IEqualityComparer) ParamValue.getValue(ParamValue) ParamValue.getValueAsString(ParamValue) ParamValue.getValueAsInt(ParamValue) ParamValue.getValueAsTerm(ParamValue) ParamValue.tryGetUnit(ParamValue) ParamValue.tryAddName(string, ParamValue) ParamValue.tryAddAccession(string, ParamValue) ParamValue.tryAddReference(string, ParamValue) ParamValue.tryAddUnit(CvTerm, ParamValue) ParamValue.Equals(ParamValue) ParamValue.Equals(object) ParamValue.Tag ParamValue.IsValue ParamValue.IsCvValue ParamValue.IsWithCvUnitAccession object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Properties v public IConvertible v { get; } Property Value IConvertible"
  },
  "api/ControlledVocabulary.ParamValue.WithCvUnitAccession.html": {
    "href": "api/ControlledVocabulary.ParamValue.WithCvUnitAccession.html",
    "title": "Class ParamValue.WithCvUnitAccession",
    "keywords": "Class ParamValue.WithCvUnitAccession Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public class ParamValue.WithCvUnitAccession : ParamValue, IEquatable<ParamValue>, IStructuralEquatable Inheritance object ParamValue ParamValue.WithCvUnitAccession Implements IEquatable<ParamValue> IStructuralEquatable Inherited Members ParamValue.NewValue(IConvertible) ParamValue.NewCvValue(CvTerm) ParamValue.NewWithCvUnitAccession(IConvertible, CvTerm) ParamValue.ToString() ParamValue.GetHashCode(IEqualityComparer) ParamValue.GetHashCode() ParamValue.Equals(object, IEqualityComparer) ParamValue.getValue(ParamValue) ParamValue.getValueAsString(ParamValue) ParamValue.getValueAsInt(ParamValue) ParamValue.getValueAsTerm(ParamValue) ParamValue.tryGetUnit(ParamValue) ParamValue.tryAddName(string, ParamValue) ParamValue.tryAddAccession(string, ParamValue) ParamValue.tryAddReference(string, ParamValue) ParamValue.tryAddUnit(CvTerm, ParamValue) ParamValue.Equals(ParamValue) ParamValue.Equals(object) ParamValue.Tag ParamValue.IsValue ParamValue.IsCvValue ParamValue.IsWithCvUnitAccession object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Item2 public CvTerm Item2 { get; } Property Value CvTerm cvu public IConvertible cvu { get; } Property Value IConvertible"
  },
  "api/ControlledVocabulary.ParamValue.html": {
    "href": "api/ControlledVocabulary.ParamValue.html",
    "title": "Class ParamValue",
    "keywords": "Class ParamValue Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Represent the different cases of a parameter, which is either a simple value, a CvTerm or a simple value with CvUnit public abstract class ParamValue : IEquatable<ParamValue>, IStructuralEquatable Inheritance object ParamValue Implements IEquatable<ParamValue> IStructuralEquatable Derived ParamValue.CvValue ParamValue.Value ParamValue.WithCvUnitAccession Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Properties IsCvValue public bool IsCvValue { get; } Property Value bool IsValue public bool IsValue { get; } Property Value bool IsWithCvUnitAccession public bool IsWithCvUnitAccession { get; } Property Value bool Tag public int Tag { get; } Property Value int Methods Equals(ParamValue) public override sealed bool Equals(ParamValue obj) Parameters obj ParamValue Returns bool Equals(object) public override sealed bool Equals(object obj) Parameters obj object Returns bool Equals(object, IEqualityComparer) public override sealed bool Equals(object obj, IEqualityComparer comp) Parameters obj object comp IEqualityComparer Returns bool GetHashCode() public override sealed int GetHashCode() Returns int GetHashCode(IEqualityComparer) public override sealed int GetHashCode(IEqualityComparer comp) Parameters comp IEqualityComparer Returns int NewCvValue(CvTerm) public static ParamValue NewCvValue(CvTerm _cv) Parameters _cv CvTerm Returns ParamValue NewValue(IConvertible) public static ParamValue NewValue(IConvertible _v) Parameters _v IConvertible Returns ParamValue NewWithCvUnitAccession(IConvertible, CvTerm) public static ParamValue NewWithCvUnitAccession(IConvertible _cvu, CvTerm item2) Parameters _cvu IConvertible item2 CvTerm Returns ParamValue ToString() public override string ToString() Returns string getValue(ParamValue) Returns the value of the Param as IConvertible public static IConvertible getValue(ParamValue param) Parameters param ParamValue Returns IConvertible getValueAsInt(ParamValue) Returns the value of the Param as int if possible, else fails public static int getValueAsInt(ParamValue param) Parameters param ParamValue Returns int getValueAsString(ParamValue) Returns the value of the Param as string public static string getValueAsString(ParamValue param) Parameters param ParamValue Returns string getValueAsTerm(ParamValue) Returns the value of the Param as a term public static CvTerm getValueAsTerm(ParamValue param) Parameters param ParamValue Returns CvTerm tryAddAccession(string, ParamValue) Returns a new paramValue with the given annotationID if possible, else returns None public static FSharpOption<ParamValue> tryAddAccession(string accession, ParamValue param) Parameters accession string param ParamValue Returns FSharpOption<ParamValue> tryAddName(string, ParamValue) Returns a new paramValue with the given name if possible, else returns None public static FSharpOption<ParamValue> tryAddName(string name, ParamValue param) Parameters name string param ParamValue Returns FSharpOption<ParamValue> tryAddReference(string, ParamValue) Returns a new paramValue with the given reference if possible, else returns None public static FSharpOption<ParamValue> tryAddReference(string @ref, ParamValue param) Parameters ref string param ParamValue Returns FSharpOption<ParamValue> tryAddUnit(CvTerm, ParamValue) Returns a new paramValue with the given unit if possible, else returns None public static FSharpOption<ParamValue> tryAddUnit(CvTerm unit, ParamValue param) Parameters unit CvTerm param ParamValue Returns FSharpOption<ParamValue> tryGetUnit(ParamValue) Returns the unit of the Param if it exists, else returns None public static FSharpOption<CvTerm> tryGetUnit(ParamValue param) Parameters param ParamValue Returns FSharpOption<CvTerm>"
  },
  "api/ControlledVocabulary.UserParam.html": {
    "href": "api/ControlledVocabulary.UserParam.html",
    "title": "Class UserParam",
    "keywords": "Class UserParam Namespace ControlledVocabulary Assembly ControlledVocabulary.dll Represents a structured value, annotated by a user defined name public class UserParam : CvAttributeCollection, IDictionary<string, IParam>, ICollection<KeyValuePair<string, IParam>>, IDictionary, ICollection, IReadOnlyDictionary<string, IParam>, IReadOnlyCollection<KeyValuePair<string, IParam>>, IEnumerable<KeyValuePair<string, IParam>>, IEnumerable, ISerializable, IDeserializationCallback, IParam, IParamBase, ICvBase, IAttributeCollection Inheritance object Dictionary<string, IParam> CvAttributeCollection UserParam Implements IDictionary<string, IParam> ICollection<KeyValuePair<string, IParam>> IDictionary ICollection IReadOnlyDictionary<string, IParam> IReadOnlyCollection<KeyValuePair<string, IParam>> IEnumerable<KeyValuePair<string, IParam>> IEnumerable ISerializable IDeserializationCallback IParam IParamBase ICvBase IAttributeCollection Inherited Members CvAttributeCollection.AddAttribute(IParam) CvAttributeCollection.TryAddAttribute(IParam) CvAttributeCollection.TryGetAttribute(string) CvAttributeCollection.TryGetAttribute(CvTerm) CvAttributeCollection.GetAttribute(string) CvAttributeCollection.GetAttribute(CvTerm) CvAttributeCollection.ContainsAttribute(string) CvAttributeCollection.ContainsAttribute(CvTerm) CvAttributeCollection.IsStructuralChildOf(ICvBase) CvAttributeCollection.isStructuralChildOf(ICvBase, IAttributeCollection) CvAttributeCollection.tryAddAttribute(IParam, IAttributeCollection) CvAttributeCollection.tryGetAttribute(string, IAttributeCollection) CvAttributeCollection.tryGetAttributeByTerm(string, IAttributeCollection) CvAttributeCollection.containsAttribute(string, IAttributeCollection) CvAttributeCollection.containsAttributeTerm(CvTerm, IAttributeCollection) CvAttributeCollection.Attributes Dictionary<string, IParam>.Add(string, IParam) Dictionary<string, IParam>.Clear() Dictionary<string, IParam>.ContainsKey(string) Dictionary<string, IParam>.ContainsValue(IParam) Dictionary<string, IParam>.GetEnumerator() Dictionary<string, IParam>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<string, IParam>.OnDeserialization(object) Dictionary<string, IParam>.Remove(string) Dictionary<string, IParam>.Remove(string, out IParam) Dictionary<string, IParam>.TryGetValue(string, out IParam) Dictionary<string, IParam>.TryAdd(string, IParam) Dictionary<string, IParam>.EnsureCapacity(int) Dictionary<string, IParam>.TrimExcess() Dictionary<string, IParam>.TrimExcess(int) Dictionary<string, IParam>.Comparer Dictionary<string, IParam>.Count Dictionary<string, IParam>.Keys Dictionary<string, IParam>.Values Dictionary<string, IParam>.this[string] object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UserParam(string, ParamValue) public UserParam(string name, ParamValue pv) Parameters name string pv ParamValue UserParam(string, ParamValue, IDictionary<string, IParam>) public UserParam(string name, ParamValue paramValue, IDictionary<string, IParam> attributes) Parameters name string paramValue ParamValue attributes IDictionary<string, IParam> UserParam(string, ParamValue, IEnumerable<IParam>) public UserParam(string name, ParamValue pv, IEnumerable<IParam> attributes) Parameters name string pv ParamValue attributes IEnumerable<IParam> Properties Accession public string Accession { get; } Property Value string DisplayText public string DisplayText { get; } Property Value string HasAttributes public bool HasAttributes { get; } Property Value bool Name public string Name { get; } Property Value string RefUri public string RefUri { get; } Property Value string Value public ParamValue Value { get; } Property Value ParamValue Methods ToString() public override string ToString() Returns string WithValue(ParamValue) public UserParam WithValue(ParamValue v) Parameters v ParamValue Returns UserParam equals(UserParam, UserParam) Returns true, if the terms of the given param items match public static bool equals(UserParam up1, UserParam up2) Parameters up1 UserParam up2 UserParam Returns bool equalsName(UserParam, UserParam) Returns true, if the names of the given param items match public static bool equalsName(UserParam up1, UserParam up2) Parameters up1 UserParam up2 UserParam Returns bool equalsTerm(CvTerm, UserParam) Returns true, if the given term matches the term of the cv item public static bool equalsTerm(CvTerm term, UserParam up) Parameters term CvTerm up UserParam Returns bool getCvAccession(UserParam) Returns the id of the cv item public static string getCvAccession(UserParam up) Parameters up UserParam Returns string getCvName(UserParam) Returns the name of the cv item public static string getCvName(UserParam up) Parameters up UserParam Returns string getCvRef(UserParam) Returns the reference of the cv item public static string getCvRef(UserParam up) Parameters up UserParam Returns string getParamValue(UserParam) Returns the value of the Param as a ParamValue public static ParamValue getParamValue(UserParam up) Parameters up UserParam Returns ParamValue getTerm(UserParam) Returns the full term of the cv item public static CvTerm getTerm(UserParam up) Parameters up UserParam Returns CvTerm getValue(UserParam) Returns the value of the Param as IConvertible public static IConvertible getValue(UserParam up) Parameters up UserParam Returns IConvertible getValueAsInt(UserParam) Returns the value of the Param as int if possible, else fails public static int getValueAsInt(UserParam up) Parameters up UserParam Returns int getValueAsString(UserParam) Returns the value of the Param as string public static string getValueAsString(UserParam up) Parameters up UserParam Returns string getValueAsTerm(UserParam) Returns the value of the Param as a term public static CvTerm getValueAsTerm(UserParam up) Parameters up UserParam Returns CvTerm mapValue(FSharpFunc<ParamValue, ParamValue>, UserParam) public static CvParam mapValue(FSharpFunc<ParamValue, ParamValue> f, UserParam up) Parameters f FSharpFunc<ParamValue, ParamValue> up UserParam Returns CvParam toCvParam(UserParam) public static CvParam toCvParam(UserParam up) Parameters up UserParam Returns CvParam tryAddAccession(string, UserParam) public static FSharpOption<UserParam> tryAddAccession(string acc, UserParam up) Parameters acc string up UserParam Returns FSharpOption<UserParam> tryAddName(string, UserParam) public static FSharpOption<UserParam> tryAddName(string name, UserParam up) Parameters name string up UserParam Returns FSharpOption<UserParam> tryAddReference(string, UserParam) public static FSharpOption<UserParam> tryAddReference(string @ref, UserParam up) Parameters ref string up UserParam Returns FSharpOption<UserParam> tryAddUnit(CvTerm, UserParam) public static FSharpOption<UserParam> tryAddUnit(CvTerm unit, UserParam up) Parameters unit CvTerm up UserParam Returns FSharpOption<UserParam> tryGetCvUnit(UserParam) public static FSharpOption<CvTerm> tryGetCvUnit(UserParam up) Parameters up UserParam Returns FSharpOption<CvTerm> tryGetCvUnitTermAccession(UserParam) public static FSharpOption<string> tryGetCvUnitTermAccession(UserParam up) Parameters up UserParam Returns FSharpOption<string> tryGetCvUnitTermName(UserParam) public static FSharpOption<string> tryGetCvUnitTermName(UserParam up) Parameters up UserParam Returns FSharpOption<string> tryGetCvUnitTermRef(UserParam) public static FSharpOption<string> tryGetCvUnitTermRef(UserParam up) Parameters up UserParam Returns FSharpOption<string> tryGetCvUnitValue(UserParam) public static FSharpOption<IConvertible> tryGetCvUnitValue(UserParam up) Parameters up UserParam Returns FSharpOption<IConvertible> tryGetValueAccession(UserParam) public static FSharpOption<string> tryGetValueAccession(UserParam up) Parameters up UserParam Returns FSharpOption<string> tryGetValueRef(UserParam) public static FSharpOption<string> tryGetValueRef(UserParam up) Parameters up UserParam Returns FSharpOption<string> tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>>, UserParam) public static FSharpOption<UserParam> tryMapValue(FSharpFunc<ParamValue, FSharpOption<ParamValue>> f, UserParam up) Parameters f FSharpFunc<ParamValue, FSharpOption<ParamValue>> up UserParam Returns FSharpOption<UserParam>"
  },
  "api/ControlledVocabulary.UserParamExtensions.html": {
    "href": "api/ControlledVocabulary.UserParamExtensions.html",
    "title": "Class UserParamExtensions",
    "keywords": "Class UserParamExtensions Namespace ControlledVocabulary Assembly ControlledVocabulary.dll public static class UserParamExtensions Inheritance object UserParamExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CvBase.tryUserParam.Static(ICvBase) public static FSharpOption<UserParam> CvBase.tryUserParam.Static(ICvBase cv) Parameters cv ICvBase Returns FSharpOption<UserParam> CvParam.toUserParam.Static(CvParam) public static UserParam CvParam.toUserParam.Static(CvParam cvp) Parameters cvp CvParam Returns UserParam Param.toCvParam.Static(IParam) public static CvParam Param.toCvParam.Static(IParam cv) Parameters cv IParam Returns CvParam Param.toUserParam.Static(IParam) public static UserParam Param.toUserParam.Static(IParam cv) Parameters cv IParam Returns UserParam Param.tryUserParam.Static(IParam) public static FSharpOption<UserParam> Param.tryUserParam.Static(IParam cv) Parameters cv IParam Returns FSharpOption<UserParam> ParamBase.tryUserParam.Static(IParamBase) public static FSharpOption<UserParam> ParamBase.tryUserParam.Static(IParamBase cv) Parameters cv IParamBase Returns FSharpOption<UserParam>"
  },
  "api/ControlledVocabulary.html": {
    "href": "api/ControlledVocabulary.html",
    "title": "Namespace ControlledVocabulary",
    "keywords": "Namespace ControlledVocabulary Classes CvAttributeCollection Contains attributes by which to qualify a cv object CvBase CvContainer Represents a collection of structured properties, annotated with a controlled vocabulary term. CvObject<T> Represents a generic object, annotated with a controlled vocabulary term CvParam Represents a structured value, annotated with a controlled vocabulary term Attributes can be used to further describe the CvParam CvParamExtensions CvTerm Represents a term from a controlled vocabulary (Cv) in the form of: id|accession ; name|value ; refUri IParamExtensions Param ParamBase ParamValue Represent the different cases of a parameter, which is either a simple value, a CvTerm or a simple value with CvUnit ParamValue.CvValue ParamValue.Tags ParamValue.Value ParamValue.WithCvUnitAccession UserParam Represents a structured value, annotated by a user defined name UserParamExtensions Interfaces IAttributeCollection ICvBase Interface ensures the propterties necessary for CvTerm IParam IParamBase Interface ensures the value as ParamValue<'T>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}